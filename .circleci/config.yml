version: 2.1

parameters:
  project-name:
    type: string
    default: comino-document-migrator
  working-dir:
    type: string
    default: ~/comino-document-migrator
  npm-cache-version:
    type: string
    default: v1

orbs:
  aws-cli: circleci/aws-cli@3.1.3
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node-defaults:
    docker:
      - image: cimg/node:16.17.0
    working_directory: << pipeline.parameters.working-dir >>

commands:
  attach-workspace:
    steps:
      - attach_workspace:
          at: << pipeline.parameters.working-dir >>

  setup-remote-docker:
    steps:
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true

  install-node-dependencies:
    steps:
      - restore_cache:
          name: Restore node packages
          key: npm-<< pipeline.parameters.npm-cache-version >>-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm ci
      - save_cache:
          name: Save node packages
          key: npm-<< pipeline.parameters.npm-cache-version >>-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  deploy-image:
    parameters:
      aws-account-id:
        type: string
      aws-region:
        type: string
    steps:
      - setup-remote-docker
      - aws-cli/install
      - checkout
      - attach-workspace
      - aws_assume_role/assume_role:
          account: << parameters.aws-account-id >>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - run:
          name: Login Docker
          command: aws ecr get-login-password --region << parameters.aws-region >> | docker login --username AWS --password-stdin << parameters.aws-account-id >>.dkr.ecr.<< parameters.aws-region >>.amazonaws.com
      - run:
          name: Load image
          command: docker load --input image.tar
      - run:
          name: Tag image
          command: |
            docker tag << pipeline.parameters.project-name >> << parameters.aws-account-id >>.dkr.ecr.<< parameters.aws-region >>.amazonaws.com/<< pipeline.parameters.project-name >>:latest
            docker tag << pipeline.parameters.project-name >> << parameters.aws-account-id >>.dkr.ecr.<< parameters.aws-region >>.amazonaws.com/<< pipeline.parameters.project-name >>:<< pipeline.git.revision >>
      - run:
          name: Deploy image
          command: |
            docker push << parameters.aws-account-id >>.dkr.ecr.<< parameters.aws-region >>.amazonaws.com/<< pipeline.parameters.project-name >>:latest
            docker push << parameters.aws-account-id >>.dkr.ecr.<< parameters.aws-region >>.amazonaws.com/<< pipeline.parameters.project-name >>:<< pipeline.git.revision >>

jobs:
  unit-test:
    executor: node-defaults
    steps:
      - checkout
      - install-node-dependencies
      - run:
          name: Run unit tests
          command: npm run test:ci
      - store_artifacts:
          path: /tmp/coverage

  build-image:
    executor: node-defaults
    steps:
      - setup-remote-docker
      - checkout
      - attach-workspace
      - run:
          name: Build image
          command: docker build -t << pipeline.parameters.project-name >> .
      - run:
          name: Archive image
          command: docker save -o image.tar << pipeline.parameters.project-name >>
      - persist_to_workspace:
          root: .
          paths:
            - image.tar

  deploy-image-staging:
    executor: node-defaults
    steps:
      - deploy-image:
          aws-account-id: $AWS_ACCOUNT_STAGING
          aws-region: $AWS_REGION

  deploy-image-production:
    executor: node-defaults
    steps:
      - deploy-image:
          aws-account-id: $AWS_ACCOUNT_PRODUCTION
          aws-region: $AWS_REGION

workflows:
  version: 2
  check-and-deploy:
    jobs:
      - unit-test

      - build-image:
          filters:
            branches:
              only:
                - main
          requires:
            - unit-test

      - deploy-image-staging:
          context: api-assume-role-document-evidence-store-staging-context
          filters:
            branches:
              only:
                - main
          requires:
            - build-image

      - approve-deploy-production:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - deploy-image-staging

      - deploy-image-production:
          context: api-assume-role-document-evidence-store-production-context
          filters:
            branches:
              only:
                - main
          requires:
            - approve-deploy-production
